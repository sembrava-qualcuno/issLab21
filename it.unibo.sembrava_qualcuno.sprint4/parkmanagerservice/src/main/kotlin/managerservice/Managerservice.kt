/* Generated by AN DISI Unibo */ 
package managerservice

import alice.tuprolog.Term
import fan.CoapFan
import fan.FanInterface
import it.unibo.kactor.ActorBasicFsm
import kotlinx.coroutines.CoroutineScope
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import org.eclipse.californium.core.CoapClient
import parkmanagerservice.model.Message
import parkmanagerservice.model.ParkingArea
import parkmanagerservice.model.ParkingAreaKb
import thermometer.CoapThermometer
import thermometer.ThermometerController

class Managerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
				val PARKINGAREA_HOSTNAME = System.getenv("PARKINGAREA_HOSTNAME") ?: "parkingarea"
				val PARKINGAREA_PORT = System.getenv("PARKINGAREA_PORT") ?: "8027"

		        val trolleyResource : org.eclipse.californium.core.CoapClient = CoapClient("coap://localhost:8024/ctxtrolley/trolley")
		        val thermometerController = ThermometerController(CoapThermometer("coap://$PARKINGAREA_HOSTNAME:$PARKINGAREA_PORT/parkingarea/thermometer"), 30)
		        val fanResource : FanInterface = CoapFan("coap://$PARKINGAREA_HOSTNAME:$PARKINGAREA_PORT/parkingarea/fan")

				println("managerservice connected to parkingarea at $PARKINGAREA_HOSTNAME:$PARKINGAREA_PORT")
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("managerservice STARTS")
						updateResourceRep( "managerservice STARTS"  
						)
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("managerservice WAITING for requests")
						updateResourceRep( "managerservice WAITING for requests"  
						)
					}
					 transition(edgeName="t08",targetState="monitor",cond=whenRequest("getParkingArea"))
					transition(edgeName="t09",targetState="manage",cond=whenRequest("updateTrolley"))
				}
			state("manage") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updateTrolley(ACTION)"), Term.createTerm("updateTrolley(ACTION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val ACTION = payloadArg(0) 
											   lateinit var message : Message
											   lateinit var RESPONSE : String
											
												when(ACTION){
													"stop" -> { 
														if(ParkingAreaKb.highTemperature){
															message = Message(0, "Success")
															RESPONSE = Json.encodeToString(message)
														}
														else{
																message = Message(9, "Forbidden: temperature is not high enough!")
																RESPONSE = Json.encodeToString(message)  
								println("managerservice temperature is not high enough")
								updateResourceRep( "managerservice temperature is not high enough"  
								)
								} 
								forward("stop", "stop(X)" ,"trolley" ) 
								println("managerservice $ACTION the trolley")
								updateResourceRep( "managerservice $ACTION the trolley"  
								)
								}
														"resume" -> {
															if(!ParkingAreaKb.highTemperature){
															message = Message(0, "Success")
															RESPONSE = Json.encodeToString(message)
														}
														else{
																message = Message(9, "Forbidden: temperature is not low enough!")
																RESPONSE = Json.encodeToString(message)  
								println("managerservice temperature is not low enough")
								updateResourceRep( "managerservice temperature is not low enough"  
								)
								} 
								forward("resume", "resume(X)" ,"trolley" ) 
								println("managerservice $ACTION the trolley")
								updateResourceRep( "managerservice $ACTION the trolley"  
								)
								}
														else -> {
															println("action error")
															message = Message(8, "Bad Request")
															RESPONSE = Json.encodeToString(message)
								println("managerservice action error")
								updateResourceRep( "managerservice action error"  
								)
								}
													}//end when 
								answer("updateTrolley", "updateResult", "$RESPONSE"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}
				state("monitor") { //this:State
					action { //it:State
						println("managerservice GETTING parking area state")
						updateResourceRep( "managerservice GETTING parking area state"  
						)
						
									val fanState = fanResource.getState()
									val thermometerState = thermometerController.getTemperature()
									val trolleyResourceString = trolleyResource.get().getResponseText()
						val trolleyState : String = if(trolleyResourceString == "trolley IDLE" ||
					trolleyResourceString == "trolley at HOME"
			){
				"idle"
			} else if(trolleyResourceString == "trolley STOPPED"){
				"stopped"
			} else{
				"working"
			}
									val RESPONSE = Json.encodeToString(ParkingArea(fanState, thermometerState, trolleyState))
						answer("getParkingArea", "parkingAreaState", "$RESPONSE"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
