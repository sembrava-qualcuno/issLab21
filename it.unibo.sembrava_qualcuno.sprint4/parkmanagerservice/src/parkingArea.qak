System carparking

//CLIENT SERVICE

//acceptIN
Request reqenter : reqenter(X)
Reply   enter    : enter(MESSAGE)

//informIN 
Request carenter : carenter(SLOTNUM)
Reply   receipt  : receipt(MESSAGE)
 
Dispatch goToWork : goToWork(X)
  
//acceptOut
Request reqexit : reqexit(TOKENID)
Reply 	exit 	: exit(X)

Dispatch moveToInOutdoor : moveToInOutdoor(WHERE)
Dispatch moveToPark : moveToPark(SLOTNUM)

//MANAGER SERVICE
//monitor
Request getParkingArea : getParkingArea(X) 
Reply parkingAreaState : parkingAreaState(STATE)
//manage 
Request updateTrolley : updateTrolley(ACTION)
Reply updateResult : updateResult(STATE)

//TROLLEY
Dispatch goToIdle : goToIdle(X)
Dispatch stop	 : stop(X)
Dispatch resume : resume(X)	
Dispatch cmd       : cmd(MOVE)     
Request step       : step( TIME )	

Context ctxparkmanagerservice ip[host="localhost" port=8023]
Context ctxtrolley ip[host="localhost" port=8024]
Context ctxbasicrobot ip [host="127.0.0.1" port=8020]    

ExternalQActor basicrobot context ctxbasicrobot 
 
QActor clientservice context ctxparkmanagerservice {
	[#	
		val weightSensor : WeightSensorInterface = CoapWeightSensor("coap://localhost:8025/weightSensor")
        val sonarController = SonarController(CoapSonar("coap://localhost:8026/sonar"), 60)
        val trolleyResource : org.eclipse.californium.core.CoapClient = CoapClient("coap://localhost:8024/ctxtrolley/trolley")
	#]
	
	State s0 initial {
		println("clientservice STARTS")
		updateResource [# "clientservice STARTS" #]
		//Read state from file
		[#  
			if(java.io.File("ServiceState.bin").exists()) {
				val inps = java.io.ObjectInputStream(java.io.FileInputStream("ServiceState.bin"))
				ParkingAreaKb.slot = inps.readObject() as MutableMap<Int, String>		
			}
		#]
	}
	Goto work
	 
	State work {
		println("clientservice waiting...")
		updateResource [# "clientservice waiting ..." #]
	}
	Transition t0 
		whenRequest reqenter -> handleEnterRequest
		whenRequest reqexit -> handleOutRequest
	
	State handleEnterRequest {
        printCurrentMessage
        println("clientservice reply to reqenter")
        updateResource [# "clientservice reply to reqenter" #]
        [# 
            lateinit var message : Message
            var SLOTNUM = 0 #
        ]

        //acceptIN
        if [# weightSensor.getWeight() == 0 #] { 
        	if [# trolleyResource.get().getResponseText() != ("trolley STOPPED") #] {
        		//Get first free parking spot, or 0
	            [#
	                for(i in 1..6) {
	                    if(ParkingAreaKb.slot.get(i).equals("")) {
	                        SLOTNUM = i
	                        break
	                    }
	                }
	            #]
	
	            if [# SLOTNUM == 0 #] {
	                forward clientservice -m goToWork : goToWork(enter($SLOTNUM))
	            }
	
	            [# message = Message(0, "$SLOTNUM") #]
        	}
        	else {
        		forward clientservice -m goToWork : goToWork(enter($SLOTNUM))

            	[# message = Message(7, "The trolley is stopped") #]
        	}
        }
        else {
            forward clientservice -m goToWork : goToWork(enter($SLOTNUM))

            [# message = Message(1, "The indoor area is engaged") #]
        }

        //informIN
        //ReplyTo reqenter
        println("clientservice reply enter($SLOTNUM)")
        updateResource [# "$SLOTNUM" #]
        [# val RESPONSE = Json.encodeToString(message) #]
        replyTo reqenter with enter : $RESPONSE
    }
    Transition t0
    	whenTime 60000 -> work
        whenMsg goToWork -> work
        whenRequest carenter -> enterthecar
	
	State enterthecar {
		printCurrentMessage		
		println("clientservice reply to carenter")
		updateResource [# "parkingclientservice reply to carenter" #]
		
 		onMsg(carenter : carenter(SLOTNUM)) {
 			[# var SLOTNUM = payloadArg(0).toInt() #]
			
			if [# SLOTNUM in 1..6 && ParkingAreaKb.slot.get(SLOTNUM).equals("") #] {
				if [# weightSensor.getWeight() > 0 #] {
					//Generate token
					[#
						val sdf = java.text.SimpleDateFormat("ddMMyyyyhhmmss")
						val currentDate = sdf.format(java.util.Date())	
						val TOKENID = "$SLOTNUM$currentDate"
					#]
					
					//Reply with the TOKENID
					[# val RESPONSE = Json.encodeToString(Message(0, "$TOKENID")) #]
					replyTo carenter with receipt : $RESPONSE
					
					// Send the trolley to the INDOOR area
					forward trolley -m moveToInOutdoor : moveToInOutdoor(indoor)
					delay 2000
					println("clientservice moves the car to SLOTNUM = $SLOTNUM")
					updateResource [# "parkingclientservice moves the car to SLOTNUM = $SLOTNUM" #]
					forward trolley -m moveToPark : moveToPark($SLOTNUM)
						
					//Set the slot occupied
					[# ParkingAreaKb.slot.set(SLOTNUM, "$TOKENID") #]
						
					//Save state to file
					[#
						val os = java.io.ObjectOutputStream( java.io.FileOutputStream("ServiceState.bin") )
						os.writeObject(ParkingAreaKb.slot)
						os.flush()
						os.close()
					#]
					
					forward clientservice -m goToWork : goToWork(enter($SLOTNUM))
				}
				else {
					[# val RESPONSE = Json.encodeToString(Message(2, "The indoor area is free")) #]
					replyTo carenter with receipt : $RESPONSE
				}
			} else {
				[# val RESPONSE = Json.encodeToString(Message(3, "Invalid parking slot number")) #]
				replyTo carenter with receipt : $RESPONSE
			}
			
			//ReplyTo carenter
	        println("clientservice reply")
	        updateResource [# "clientservice reply" #]
		}
	}
	Transition t0
		whenTime 60000 -> work
		whenMsg goToWork -> work
		whenRequest carenter -> enterthecar
		 
	
	State handleOutRequest {
		printCurrentMessage
		println("clientservice reply to reqexit")
		updateResource [# "parkingclientservice reply to reqexit" #]
		
		onMsg(reqexit : reqexit(TOKENID)) {
			[# var TOKENID = payloadArg(0) #]
			//Check if the outdoor area is engaged
			if [# sonarController.isOutdoorFree() #] {
				if [# trolleyResource.get().getResponseText() != ("trolley STOPPED") #]{
					//Retrieve parking slot from the tokenid
					[# 
						var SLOTNUM = 0
						ParkingAreaKb.slot.forEach { (k, v) -> 
							if(v == TOKENID)
								SLOTNUM = k
						}
					#]
					
					if [# SLOTNUM != 0 #] {
						//Reply with success
						[# val RESPONSE = Json.encodeToString(Message(0, "Success")) #]
						replyTo reqexit with exit : $RESPONSE
					
						// Send the trolley to the parking slot
						forward trolley -m moveToPark : moveToPark($SLOTNUM)
						delay 2000
						println("clientservice moves the car from SLOTNUM = $SLOTNUM")
						updateResource [# "clientservice moves the car from SLOTNUM = $SLOTNUM" #]
						forward trolley -m moveToInOutdoor : moveToInOutdoor(outdoor)
						
						//Set the slot free
						[# ParkingAreaKb.slot.set(SLOTNUM, "") #]	
						
						//Save state to file
						[#
							val os = java.io.ObjectOutputStream( java.io.FileOutputStream("ServiceState.bin") )
							os.writeObject(ParkingAreaKb.slot)
							os.flush()
							os.close()
						#]
					}
					else {
						[# val RESPONSE = Json.encodeToString(Message(4, "Invalid tokenid")) #]
						replyTo reqexit with exit : $RESPONSE
					}					
				}
				else{
					[# val RESPONSE = Json.encodeToString(Message(6, "The trolley is stopped")) #]
					replyTo reqexit with exit : $RESPONSE
				}
			} else {
				[# val RESPONSE = Json.encodeToString(Message(5, "The outdoor area is engaged")) #]
				replyTo reqexit with exit : $RESPONSE
			}
				
			//ReplyTo reqexit
			println("clientservice reply")
	        updateResource [# "clientservice reply" #]
		}
	}
	Goto work
}

QActor managerservice context ctxparkmanagerservice {
	[#	
		val weightSensor : WeightSensorInterface = CoapWeightSensor("coap://localhost:8025/weightSensor")
        val sonarController = SonarController(CoapSonar("coap://localhost:8026/sonar"), 60)
        val trolleyResource : org.eclipse.californium.core.CoapClient = CoapClient("coap://localhost:8024/ctxtrolley/trolley")
        val thermometerController = ThermometerController(CoapThermometer("coap://localhost:8027/parkingarea/thermometer"), 30)
        val fanResource : FanInterface = CoapFan("coap://localhost:8027/parkingarea/fan") 
	#]
	
	State s0 initial{
		println("managerservice STARTS")
		updateResource [# "managerservice STARTS" #]
		[#
			managerservice.CoapManagerObserver("SonarController").start()
			managerservice.CoapManagerObserver("ThermometerController").start()
		#]
	}
	Goto work
	
	State work{
		println("managerservice WAITING for requests")
		updateResource [# "managerservice WAITING for requests" #]
	}
	Transition t0
		whenRequest getParkingArea -> monitor
		whenRequest updateTrolley -> manage
	
	State manage{
		onMsg(updateTrolley: updateTrolley(ACTION)){
			[# var ACTION = payloadArg(0) 
			   lateinit var message : Message
			   lateinit var RESPONSE : String
			#]
			println("managerservice $ACTION the trolley")
			updateResource [# "managerservice $ACTION the trolley" #]
			
			if [# ParkingAreaKb.highTemperature #]{
				[#
					when(ACTION){
						"stop" -> { 
							message = Message(0, "Success")
							RESPONSE = Json.encodeToString(message)
							
				#]
						forward trolley -m stop: stop(X) 
					[#}
						"resume" -> {
							message = Message(0, "Success")
							RESPONSE = Json.encodeToString(message)
					#]
						forward trolley -m resume: resume(X)
					[#}
						else -> {
							println("action error")
							message = Message(8, "Bad Request")
							RESPONSE = Json.encodeToString(message)
						}
					#]
					
				[#}//end when#]				
			}
			else{
				[# message = Message(8, "Bad Request")
				RESPONSE = Json.encodeToString(message) #]
			}
			replyTo updateTrolley with updateResult : $RESPONSE
		}
		
	}
	Goto work
	
	State monitor{
		println("managerservice GETTING parking area state")
		updateResource [# "managerservice GETTING parking area state" #]
			
		[#
			var fanState = fanResource.getState()
			var thermometerState = thermometerController.getTemperature()
			var trolleyState = trolleyResource.get().getResponseText()
			val RESPONSE = Json.encodeToString(ParkingArea(fanState, thermometerState, trolleyState))
		#]
			replyTo getParkingArea with parkingAreaState : $RESPONSE	
	}
	Goto work
}

QActor trolley context  ctxtrolley{
	[#
		val HOME : Pair<String,String> = Pair("0", "0")
		val INDOOR : Pair<String,String> = Pair("6", "0")
		val OUTDOOR : Pair<String,String> = Pair("6", "4")
		val SLOT1 : Pair<String,String> = Pair("1", "1")
		val SLOT2 : Pair<String,String> = Pair("1", "2")
		val SLOT3 : Pair<String,String> = Pair("1", "3")
		val SLOT4 : Pair<String,String> = Pair("4", "1")
		val SLOT5 : Pair<String,String> = Pair("4", "2")
		val SLOT6 : Pair<String,String> = Pair("4", "3")
		var currState : String = "INIT"
	#]
	 
	State s0 initial {
		println("trolley STARTS")
		updateResource [# "trolley STARTS" #]
		run itunibo.planner.plannerUtil.loadRoomMap("parkingMap") 
		run itunibo.planner.plannerUtil.initAI()
		println("INITIAL MAP") 
 		run itunibo.planner.plannerUtil.showMap() 
		run itunibo.planner.plannerUtil.startTimer()
		//TODO: begin with a different position than the home one
		
	}
	Goto idle
	
	State idle {
		println("trolley IDLE")
		updateResource [# "trolley IDLE" #]
		[# currState = "IDLE" #]
		//Moves the trolley to the home position if not there already
		[# if(!itunibo.planner.plannerUtil.atHome()){
				itunibo.planner.plannerUtil.planForGoal(HOME.first, HOME.second)
				var mv : String = itunibo.planner.plannerUtil.getNextPlannedMove()
				while(! mv.equals("")){
					when(mv){
						"w" ->
			#] 
						request basicrobot -m step : step(340)
						[#
							"s" ->
						#]
						forward basicrobot -m cmd : cmd(s)
						[#
							"l" ->
						#]
						forward basicrobot -m cmd : cmd(l)
						[#
							"r" ->
						#]
						forward basicrobot -m cmd : cmd(r)
						[#
							else -> {println("Command error")}
						#]
					[# } //end when
						delay(340)
						itunibo.planner.plannerUtil.updateMap(mv)
						mv = itunibo.planner.plannerUtil.getNextPlannedMove()
					#]//end when	
				[#}#]//end while
		[#}#] // end if
		
		//run itunibo.planner.plannerUtil.saveRoomMap("parkingMap")
		println("trolley at HOME")
		updateResource [# "trolley at HOME" #] 
		
	}
	Transition t0
		whenMsg moveToInOutdoor -> working
		whenMsg moveToPark -> working
		whenMsg stop -> stopped
		whenMsg goToIdle -> idle
	
	State working {
		printCurrentMessage
		println("trolley WORKING")
		//updateResource [# "trolley WORKING" #]
		
		onMsg(moveToInOutdoor : moveToInOutdoor(WHERE)) {
			
			[# var WHERE = payloadArg(0) #]
			
			if [# WHERE.equals("indoor") #]{
				//Move the trolley to the INDOOR area
				println("trolley trip to INDOOR start")
				updateResource [# "trolley trip to INDOOR start" #]
				[# 
					itunibo.planner.plannerUtil.planForGoal(INDOOR.first,INDOOR.second) 
					currState = "INDOOR"
				#]
			}
			
			if [# WHERE.equals("outdoor") #]{
				//Move the trolley to the OUTDOOR area
				println("trolley trip to OUTDOOR start")
				updateResource [# "trolley trip to OUTDOOR start" #]
				[# 
					itunibo.planner.plannerUtil.planForGoal(OUTDOOR.first,OUTDOOR.second) 
					currState = "OUTDOOR"
				#]
			} 
			
			[#
				var mv : String = itunibo.planner.plannerUtil.getNextPlannedMove()
				while(! mv.equals("")){
					when(mv){
						"w" ->
			#] 
						request basicrobot -m step : step(340)
						[#
							"s" ->
						#]
						forward basicrobot -m cmd : cmd(s)
						[#
							"l" ->
						#]
						forward basicrobot -m cmd : cmd(l)
						[#
							"r" ->
						#]
						forward basicrobot -m cmd : cmd(r)
						[#
							else -> {println("Command error")}
						#]
					[# } //end when
						delay(340)
						itunibo.planner.plannerUtil.updateMap(mv)
						mv = itunibo.planner.plannerUtil.getNextPlannedMove()
					#]//end when	
				[#}#]//end while 
				
				//run itunibo.planner.plannerUtil.saveRoomMap("parkingMap")
				if [# WHERE.equals("outdoor") #]{
					println("trolley trip to OUTDOOR end")
					updateResource [# "trolley trip to OUTDOOR end" #]
					forward trolley -m goToIdle : goToIdle(X)
				
				}
				if [# WHERE.equals("indoor") #]{
					println("trolley trip to INDOOR end")
					updateResource [# "trolley trip to INDOOR end" #]
				}
		}
		
		//Trolley could be stopped in between these trips -> SPRINT4
		onMsg(moveToPark : moveToPark(SLOTNUM)) {
			[# 
				var SLOTNUM = payloadArg(0).toInt()
				if( currState.equals("INDOOR"))
					currState = "PARKIN"
				else
					currState = "PARKOUT"
			#]
			println("trolley moveToPark($SLOTNUM)")
			updateResource [# "trolley moveToPark($SLOTNUM)" #]
			
			//Move the trolley to the specific parking slot
			[#
				when(SLOTNUM){
					1 -> itunibo.planner.plannerUtil.planForGoal(SLOT1.first, SLOT1.second)
					2 -> itunibo.planner.plannerUtil.planForGoal(SLOT2.first, SLOT2.second)
					3 -> itunibo.planner.plannerUtil.planForGoal(SLOT3.first, SLOT3.second)
					4 -> itunibo.planner.plannerUtil.planForGoal(SLOT4.first, SLOT4.second)
					5 -> itunibo.planner.plannerUtil.planForGoal(SLOT5.first, SLOT5.second)
					6 -> itunibo.planner.plannerUtil.planForGoal(SLOT6.first, SLOT6.second)
				}
				
				var mv = itunibo.planner.plannerUtil.getNextPlannedMove()
				while(! mv.equals("")){
					when(mv){
						"w" ->
			#] 
						request basicrobot -m step : step(340)
						[#
							"s" ->
						#]
						forward basicrobot -m cmd : cmd(s)
						[#
							"l" ->
						#]
						forward basicrobot -m cmd : cmd(l)
						[#
							"r" ->
						#]
						forward basicrobot -m cmd : cmd(r)
						[#
							else -> {println("Command error")}
						#]
					[# } //end when
						delay(340)
						itunibo.planner.plannerUtil.updateMap(mv)
						mv = itunibo.planner.plannerUtil.getNextPlannedMove()
						
					#]//end when	
				[#}#]//end while 
			
		 	updateResource [# "trolley trip to park slot $SLOTNUM end" #] 
			println("trolley trip to park slot $SLOTNUM end")
			if [# currState.equals("PARKIN") #]{
				forward trolley -m goToIdle : goToIdle(X)
			}
		}
		
		//run itunibo.planner.plannerUtil.saveRoomMap("parkingMap")
	}
	Transition t0
		whenMsg moveToPark -> working
		whenMsg moveToInOutdoor -> working
		whenMsg goToIdle -> idle
		whenMsg stop -> stopped
	
	State stopped {
		println("trolley STOPPED")
		updateResource [# "trolley STOPPED" #]
	}
	Transition t0
		whenMsg resume and [# currState.equals("INDOOR") #] -> working
		whenMsg resume and [# currState.equals("PARKOUT") #] -> working
		whenMsg resume and [# currState.equals("PARKIN") #] -> idle
		whenMsg resume and [# currState.equals("OUTDOOR") #] -> idle
		whenMsg resume and [# currState.equals("IDLE") #] -> idle
		
}
