/* Generated by AN DISI Unibo */ 
package it.unibo.outdoorparkingservicegui

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Outdoorparkingservicegui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("outdoorparkingservicegui (client mock)  STARTS")
					}
					 transition( edgeName="goto",targetState="requestToExit", cond=doswitch() )
				}	 
				state("requestToExit") { //this:State
					action { //it:State
						println("client requestToExit")
						request("reqexit", "reqexit(TOKENID)" ,"parkingmanagerservice" )  
						stateTimer = TimerActor("timer_requestToExit", 
							scope, context!!, "local_tout_outdoorparkingservicegui_requestToExit", 1000.toLong() )
					}
					 transition(edgeName="t03",targetState="retrylater",cond=whenTimeout("local_tout_outdoorparkingservicegui_requestToExit"))   
					transition(edgeName="t04",targetState="afterreceipt",cond=whenReply("exit"))
				}	 
				state("afterreceipt") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
				state("retrylater") { //this:State
					action { //it:State
						println("client will retry later")
						forward("clientLeave", "clientLeave(alice)" ,"parkingmanagerservice" ) 
					}
				}	 
			}
		}
}
