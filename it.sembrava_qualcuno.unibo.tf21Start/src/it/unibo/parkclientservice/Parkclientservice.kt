/* Generated by AN DISI Unibo */ 
package it.unibo.parkclientservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.utils.ParkingAreaKb
	
class Parkclientservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkclientservice STARTS")
						updateResourceRep( "parkclientservice STARTS"  
						)
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("parkclientservice waiting ...")
						updateResourceRep( "parkclientservice waiting ..."  
						)
					}
					 transition(edgeName="t04",targetState="handleEnterRequest",cond=whenRequest("reqenter"))
					transition(edgeName="t05",targetState="handleOutRequest",cond=whenRequest("reqexit"))
				}	 
				state("handleEnterRequest") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("parkclientservice reply to reqenter")
						updateResourceRep( "parkclientservice reply to reqenter"  
						)
						 var SLOTNUM = 0  
						if(  ParkingAreaKb.indoorfree && !ParkingAreaKb.trolleyStopped  
						 ){ 
										for(i in 0..5) {
											if(ParkingAreaKb.slotStateFree[i] == true) {
												SLOTNUM = i + 1
												ParkingAreaKb.slotStateFree[i] == false
												break
											}
										}
						if(  SLOTNUM == 0  
						 ){forward("goToWork", "goToWork(enter($SLOTNUM))" ,"parkclientservice" ) 
						}
						}
						else
						 {forward("goToWork", "goToWork(enter($SLOTNUM))" ,"parkclientservice" ) 
						 }
						println("parkclientservice reply enter($SLOTNUM)")
						updateResourceRep( "parkclientservice reply enter($SLOTNUM)"  
						)
						answer("reqenter", "enter", "enter($SLOTNUM)"   )  
					}
					 transition(edgeName="t06",targetState="work",cond=whenDispatch("goToWork"))
					transition(edgeName="t07",targetState="enterthecar",cond=whenRequest("carenter"))
				}	 
				state("enterthecar") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("parkingmanagerservice reply to enterthecar")
						updateResourceRep( "parkingmanagerservice reply to enterthecar"  
						)
						if( checkMsgContent( Term.createTerm("carenter(SLOTNUM)"), Term.createTerm("carenter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var SLOTNUM = payloadArg(0).toInt()  
								forward("moveToPark", "moveToPark($SLOTNUM)" ,"trolley" ) 
								println("parkingmanagerservice moves the car to SLOTNUM = $SLOTNUM")
								updateResourceRep( "parkingmanagerservice moves the car to SLOTNUM = $SLOTNUM "  
								)
								answer("carenter", "receipt", "receipt($SLOTNUM)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleOutRequest") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("parkingmanagerservice reply to reqexit")
						updateResourceRep( "parkingmanagerservice reply to reqexit"  
						)
						if( checkMsgContent( Term.createTerm("reqexit(TOKENID)"), Term.createTerm("reqexit(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var CARSLOTNUM = payloadArg(0).toInt()  
								if(  CARSLOTNUM >= 1 && CARSLOTNUM <= 6 && !ParkingAreaKb.slotStateFree[CARSLOTNUM - 1]  
								 ){forward("moveToOut", "moveToOut($CARSLOTNUM)" ,"trolley" ) 
								}
								else
								 { CARSLOTNUM = 0  
								 }
								println("parkingmanagerservice moves the car to SLOTNUM = $CARSLOTNUM")
								updateResourceRep( "parkingmanagerservice moves the car to SLOTNUM = $CARSLOTNUM"  
								)
								answer("reqexit", "exit", "exit($CARSLOTNUM)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
