/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("trolley STARTS")
						updateResourceRep( "trolley STARTS"  
						)
					}
				}	 
				state("idle") { //this:State
					action { //it:State
						println("trolley IDLE")
						updateResourceRep( "trolley IDLE"  
						)
					}
					 transition(edgeName="t012",targetState="working",cond=whenDispatch("moveToPark"))
					transition(edgeName="t013",targetState="working",cond=whenDispatch("moveToOut"))
					transition(edgeName="t014",targetState="stopped",cond=whenDispatch("stop"))
				}	 
				state("working") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("moveToPark(SLOTNUM)"), Term.createTerm("moveToPark(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("moveToOut(SLOTNUM)"), Term.createTerm("moveToOut(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						forward("goToIdle", "goToIdle(X)" ,"trolley" ) 
					}
					 transition(edgeName="t015",targetState="stopped",cond=whenDispatch("stop"))
					transition(edgeName="t016",targetState="idle",cond=whenDispatch("goToIdle"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						println("trolley STOPPED")
						updateResourceRep( "trolley STOPPED"  
						)
					}
					 transition(edgeName="t017",targetState="working",cond=whenDispatch("resume"))
				}	 
			}
		}
}
