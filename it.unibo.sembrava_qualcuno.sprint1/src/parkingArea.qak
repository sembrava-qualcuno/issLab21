System carparking

//INDOOR CLIENT SERVICE
//acceptIN
Request reqenter : reqenter(X)
Reply   enter    : enter(MESSAGE)

//informIN
Request carenter : carenter(SLOTNUM)
Reply   receipt  : receipt(MESSAGE)

Dispatch goToWork : goToWork(X)

Dispatch moveToIndoor : moveToIndoor(X)
Dispatch moveToPark : moveToPark(SLOTNUM)

//TROLLEY
Dispatch goToIdle : goToIdle(X)
Dispatch cmd       : cmd(MOVE)     
Request step       : step( TIME )	

Context ctxparkmanagerservice ip[host="localhost" port=8023]
Context ctxtrolley ip[host="localhost" port=8024]
Context ctxbasicrobot ip [host="127.0.0.1" port=8020]    

ExternalQActor basicrobot context ctxbasicrobot 
 
QActor parkclientservice context ctxparkmanagerservice {
	[#	val weightSensor : WeightSensorInterface = CoapWeightSensor("coap:/localhost:8020/weightSensor")	#]
	
	State s0 initial {
		println("parkclientservice STARTS")
		updateResource [# "parkclientservice STARTS" #]
		
		//TODO: read state from file
		[#  val inps = java.io.ObjectInputStream(java.io.FileInputStream("ServiceState.bin"))
			ParkingAreaKb.slot = inps.readObject() as MutableMap<Int, String>	#]
	}
	Goto work
	
	State work {
		println("parkclientservice waiting ...")
		updateResource [# "parkclientservice waiting ..." #]
	}
	Transition t0 
		whenRequest reqenter -> handleEnterRequest
	
	State handleEnterRequest {
        printCurrentMessage
        println("parkclientservice reply to reqenter")
        //updateResource [# "parkclientservice reply to reqenter" #]

        [# 
            lateinit var message : Message
            var SLOTNUM = 0 #
        ]

        //acceptIN
        if [# weightSensor.getWeight() > 0 #] { //In this sprint the trolley can not be stopped
            //Get first free parking spot, or 0
            [#
                for(i in 1..6) {
                    if(ParkingAreaKb.slot.get(i).equals("")) {
                        SLOTNUM = i
                        break
                    }
                }
            #]

            if [# SLOTNUM == 0 #] {
                forward parkclientservice -m goToWork : goToWork(enter($SLOTNUM))
            }

            [# message = Message(0, "$SLOTNUM") #]
        }
        else {
            //Reply with slotnum=0 to indicates both indoor area and trolley are occupied
            forward parkclientservice -m goToWork : goToWork(enter($SLOTNUM))

            [# message = Message(1, "The indoor area or trolley are engaged") #]
        }

        //informIN
        println("parkclientservice reply enter($SLOTNUM)")
        updateResource [# "$SLOTNUM" #]

        [# val RESPONSE = Json.encodeToString(message) #]

        //replyTo reqenter with enter : enter($SLOTNUM)
        replyTo reqenter with enter : $RESPONSE
    }
    Transition t0
        whenMsg goToWork -> work
        whenRequest carenter -> enterthecar
	
	State enterthecar {
		printCurrentMessage		
		println("parkingclientservice reply to enterthecar")
		updateResource [# "parkingclientservice reply to enterthecar" #]
		
 		onMsg(carenter : carenter(SLOTNUM)) {
			[# 
				var SLOTNUM = payloadArg(0).toInt()
			
			if(SLOTNUM >= 1 && SLOTNUM <= 6 && ParkingAreaKb.slot.get(SLOTNUM).equals("") ){
				//Generate token
				val sdf = java.text.SimpleDateFormat("dd/MM/yyyy-hh:mm:ss")
				val currentDate = sdf.format(java.util.Date())	
				val TOKENID = "$SLOTNUM-$currentDate"
			#]
				// Send the trolley to the INDOOR area
				forward trolley -m moveToIndoor : moveToIndoor(indoor)
				delay 2000
				println("parkingclientservice moves the car to SLOTNUM = $SLOTNUM")
				updateResource [# "parkingclientservice moves the car to SLOTNUM = $SLOTNUM" #]
				forward trolley -m moveToPark : moveToPark($SLOTNUM)
			
				updateResource [# "$TOKENID" #]
				//Reply with the TOKENID
				replyTo carenter with receipt : receipt($TOKENID)	
			[#
				ParkingAreaKb.slot.set(SLOTNUM, "$TOKENID") //Set the slot occupied
				//TODO: save state to file
				val os = java.io.ObjectOutputStream( java.io.FileOutputStream("ServiceState.bin") )
				os.writeObject(ParkingAreaKb.slot)
				os.flush()
				os.close()
			} else{
				 val RESPONSE = Json.encodeToString(Message(3, "Invalid parking slot number") )
			#]
				 replyTo carenter with receipt : $RESPONSE
			[#}#]
		}
	}
	Goto work
}

QActor trolley context  ctxtrolley{
	[#
			val HOME : Pair<String,String> = Pair("0", "0")
			val INDOOR : Pair<String,String> = Pair("5", "0")
			//val OUTDOOR : Pair<String,String> = Pair("5", "4")
			val SLOT1 : Pair<String,String> = Pair("1", "1")
			val SLOT2 : Pair<String,String> = Pair("1", "2")
			val SLOT3 : Pair<String,String> = Pair("1", "3")
			val SLOT4 : Pair<String,String> = Pair("4", "1")
			val SLOT5 : Pair<String,String> = Pair("4", "2")
			val SLOT6 : Pair<String,String> = Pair("4", "3")
	#]
	 
	State s0 initial {
		println("trolley STARTS")
		updateResource [# "trolley STARTS" #]
		run itunibo.planner.plannerUtil.loadRoomMap("parkingMap") 
		run itunibo.planner.plannerUtil.initAI()
		println("INITIAL MAP") 
 		run itunibo.planner.plannerUtil.showMap() 
		run itunibo.planner.plannerUtil.startTimer()
		//TODO: begin with a different position than the home one
		
	}
	Goto idle
	
	State idle {
		println("trolley IDLE")
		updateResource [# "trolley IDLE" #]
		
		//Moves the trolley to the home position if not there already
		[# if(!itunibo.planner.plannerUtil.atHome()){
				itunibo.planner.plannerUtil.planForGoal(HOME.first, HOME.second)
				var mv : String = itunibo.planner.plannerUtil.getNextPlannedMove()
				while(! mv.equals("")){
					when(mv){
						"w" ->
			#] 
						request basicrobot -m step : step(330)
						[#
							"s" ->
						#]
						forward basicrobot -m cmd : cmd(s)
						[#
							"l" ->
						#]
						forward basicrobot -m cmd : cmd(l)
						[#
							"r" ->
						#]
						forward basicrobot -m cmd : cmd(r)
						[#
							else -> {println("Command error")}
						#]
					[# } //end when
						delay(330)
						itunibo.planner.plannerUtil.updateMap(mv)
						mv = itunibo.planner.plannerUtil.getNextPlannedMove()
					#]//end when	
				[#}#]//end while
		[#}#] // end if
		
		run itunibo.planner.plannerUtil.saveRoomMap("parkingMap")
		println("trolley at HOME")
		/*
		 * USE FOR TESTS
		 * updateResource [# "trolley at HOME" #] 
		*/
	}
	Transition t0
		whenMsg moveToPark -> working
	
	State working {
		printCurrentMessage
		println("trolley WORKING")
		updateResource [# "trolley WORKING" #]
		
		onMsg(moveToIndoor : moveToIndoor(WHERE)) {
			println("trolley moveToIndoor")
			updateResource [# "trolley moveToIndoor" #]
			//Move the trolley to the INDOOR area
			println("trolley trip to INDOOR start")
			[#
				itunibo.planner.plannerUtil.planForGoal(INDOOR.first,INDOOR.second)
				var mv : String = itunibo.planner.plannerUtil.getNextPlannedMove()
				while(! mv.equals("")){
					when(mv){
						"w" ->
			#] 
						request basicrobot -m step : step(330)
						[#
							"s" ->
						#]
						forward basicrobot -m cmd : cmd(s)
						[#
							"l" ->
						#]
						forward basicrobot -m cmd : cmd(l)
						[#
							"r" ->
						#]
						forward basicrobot -m cmd : cmd(r)
						[#
							else -> {println("Command error")}
						#]
					[# } //end when
						delay(330)
						itunibo.planner.plannerUtil.updateMap(mv)
						mv = itunibo.planner.plannerUtil.getNextPlannedMove()
					#]//end when	
				[#}#]//end while 
				run itunibo.planner.plannerUtil.saveRoomMap("parkingMap")
			}
			//Trolley could be stopped in between these trips -> SPRINT4
			onMsg(moveToPark : moveToPark(SLOTNUM)) {
			[# var SLOTNUM = payloadArg(0).toInt() #]
			println("trolley moveToPark($SLOTNUM)")
			updateResource [# "trolley moveToPark($SLOTNUM)" #]
			
			//Move the trolley to the specific parking slot
			[#
				when(SLOTNUM){
					1 -> itunibo.planner.plannerUtil.planForGoal(SLOT1.first, SLOT1.second)
					2 -> itunibo.planner.plannerUtil.planForGoal(SLOT2.first, SLOT2.second)
					3 -> itunibo.planner.plannerUtil.planForGoal(SLOT3.first, SLOT3.second)
					4 -> itunibo.planner.plannerUtil.planForGoal(SLOT4.first, SLOT4.second)
					5 -> itunibo.planner.plannerUtil.planForGoal(SLOT5.first, SLOT5.second)
					6 -> itunibo.planner.plannerUtil.planForGoal(SLOT6.first, SLOT6.second)
				}
				
				var mv = itunibo.planner.plannerUtil.getNextPlannedMove()
				while(! mv.equals("")){
					when(mv){
						"w" ->
			#] 
						request basicrobot -m step : step(330)
						[#
							"s" ->
						#]
						forward basicrobot -m cmd : cmd(s)
						[#
							"l" ->
						#]
						forward basicrobot -m cmd : cmd(l)
						[#
							"r" ->
						#]
						forward basicrobot -m cmd : cmd(r)
						[#
							else -> {println("Command error")}
						#]
					[# } //end when
						delay(330)
						itunibo.planner.plannerUtil.updateMap(mv)
						mv = itunibo.planner.plannerUtil.getNextPlannedMove()
					#]//end when	
				[#}#]//end while 
				/*
		 	* USE FOR TESTS
		 	* updateResource [# "trolley trip to park slot $SLOTNUM end" #] 
			*/
			println("trolley trip to park slot $SLOTNUM end")
			forward trolley -m goToIdle : goToIdle(X)
			}
			
		run itunibo.planner.plannerUtil.saveRoomMap("parkingMap")
	}
	Transition t0
		whenMsg goToIdle -> idle
		whenMsg moveToPark -> working
}
 