/* Generated by AN DISI Unibo */ 
package it.unibo.parkclientservice

import it.unibo.kactor.*
import alice.tuprolog.*
import it.unibo.sembrava_qualcuno.model.Message
import it.unibo.sembrava_qualcuno.sprint1.ParkingAreaKb
import it.unibo.sembrava_qualcuno.weightsensor.CoapWeightSensor
import it.unibo.sembrava_qualcuno.weightsensor.WeightSensorInterface
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import java.text.SimpleDateFormat
import java.util.*

class Parkclientservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
			val weightSensor : WeightSensorInterface = CoapWeightSensor("coap://localhost:8020/weightSensor")
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkclientservice STARTS")
						updateResourceRep( "parkclientservice STARTS"  
						)
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("parkclientservice waiting ...")
						updateResourceRep( "parkclientservice waiting ..."  
						)
					}
					 transition(edgeName="t00",targetState="handleEnterRequest",cond=whenRequest("reqenter"))
				}	 
				state("handleEnterRequest") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("parkclientservice reply to reqenter")
						 
									lateinit var message : Message
									var SLOTNUM = 0  
						if(  weightSensor.getWeight() > 0
						 ){
										for(i in 1..6) {
											if(ParkingAreaKb.slot.get(i).equals("")) {
												SLOTNUM = i
												break
											}
										}
						if(  SLOTNUM == 0  
						 ){forward("goToWork", "goToWork(enter($SLOTNUM))" ,"parkclientservice" ) 
						}
						 message = Message(0, "$SLOTNUM")  
						}
						else
						 {forward("goToWork", "goToWork(enter($SLOTNUM))" ,"parkclientservice" ) 
						  message = Message(1, "The indoor area or trolley are engaged")  
						 }
						println("parkclientservice reply enter($SLOTNUM)")
						updateResourceRep( "$SLOTNUM"  
						)
						 val RESPONSE = Json.encodeToString(message)
						answer("reqenter", "enter", "$RESPONSE"   )  
					}
					 transition(edgeName="t01",targetState="work",cond=whenDispatch("goToWork"))
					transition(edgeName="t02",targetState="enterthecar",cond=whenRequest("carenter"))
				}	 
				state("enterthecar") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("parkingclientservice reply to enterthecar")
						if( checkMsgContent( Term.createTerm("carenter(SLOTNUM)"), Term.createTerm("carenter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												var SLOTNUM = payloadArg(0).toInt()
												
												//Generate token
												val sdf = SimpleDateFormat("dd/MM/yyyy-hh:mm:ss")
												val currentDate = sdf.format(Date())
												val TOKENID = "$SLOTNUM-$currentDate"	
												ParkingAreaKb.slot.set(SLOTNUM, "$TOKENID") //Set the slot occupied
								forward("moveToPark", "moveToPark($SLOTNUM)" ,"trolley" ) 
								println("parkingclientservice moves the car to SLOTNUM = $SLOTNUM")
								updateResourceRep( "$TOKENID"  
								)
								answer("carenter", "receipt", "receipt($TOKENID)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
