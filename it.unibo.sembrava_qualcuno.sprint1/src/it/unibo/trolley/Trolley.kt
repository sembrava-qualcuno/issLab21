/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("trolley STARTS")
						updateResourceRep( "trolley STARTS"  
						)
						
										
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("trolley IDLE")
						updateResourceRep( "trolley IDLE"  
						)
					}
					 transition(edgeName="t03",targetState="working",cond=whenDispatch("moveToPark"))
				}	 
				state("working") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("trolley WORKING")
						updateResourceRep( "trolley WORKING"  
						)
						if( checkMsgContent( Term.createTerm("moveToPark(SLOTNUM)"), Term.createTerm("moveToPark(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var SLOTNUM = payloadArg(0).toInt()  
								println("trolley moveToPark($SLOTNUM)")
								updateResourceRep( "trolley moveToPark($SLOTNUM)"  
								)
								
												itunibo.planner.plannerUtil.planForGoal("6","0")	
						}
						forward("goToIdle", "goToIdle(X)" ,"trolley" ) 
					}
					 transition(edgeName="t04",targetState="idle",cond=whenDispatch("goToIdle"))
				}	 
			}
		}
}
